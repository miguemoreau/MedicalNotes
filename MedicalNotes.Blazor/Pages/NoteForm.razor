@page "/NoteForm"
@page "/NoteForm/{Id:int}"
<h3>Información de la cita.</h3>
@using System.Collections.Generic
@using Data
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager



<EditForm Model="@note">
    <div class="container-fluid">

        <div class="form-group row mb-1">
            <label class="col-sm-3">Doctor Name</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="note.DoctorName"></InputText>
            </div>
        </div>

        <div class="form-group row mb-1">   
            <label class="col-sm-3">Doctor Info</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="note.DoctorInfo"></InputText>
            </div>
        </div>

        <div class="form-group row mb-1">   
            <label class="col-sm-3">Diagnosis</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="note.Diagnosis"></InputText>
            </div>
        </div>
        <div class="form-group row mb-1">   
            <label class="col-sm-3">Recipe</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="note.Recipe"></InputText>
            </div>
        </div>


 




        <div class="form-group row mb-1">
            <div class="col-sm-12">
                    <button class="btn btn-dark" @onclick="SaveNote"> Save Note </button>
                    <button class="btn btn-dark" @onclick="Cancel">Cancel</button>
            </div>
        </div>


    </div>
</EditForm>

 <footer class=" footer fixed-bottom footer bg-dark text-center ">
    <div class="container"></div>
    <div class="container">
        <p class="text-light">
            &copy; 2022 Miguel Moreau
        </p>
    </div>
    </footer>

@code {

    [Parameter]
    public int Id { get; set; }
    Request note = new Request();
    public string Url = "https://localhost:44369/api/notes/";
    private async Task SaveNote()
    {
        if (Id != 0)
        {
              var b = await Http.PutAsJsonAsync<Request>(Url, note);
        }
        else
        {
            note.Date = DateTime.Now;
            note.Reminder = true;
            var a = await Http.PostAsJsonAsync<Request>(Url, note);
        }
        NavigationManager.NavigateTo("/Notes");
    }
    private void Cancel() => NavigationManager.NavigateTo("/Notes");
    protected override async Task OnInitializedAsync() {

        if (Id != 0)
        {
            ResponseUIDTO response =  await Http.GetFromJsonAsync<ResponseUIDTO>($"{Url}{Id}");
            if (response.Success)
            { 
                note = JsonConvert.DeserializeObject<Request>(response.Data.ToString());
            }
        }
    }
}